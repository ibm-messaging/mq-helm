# Â© Copyright IBM Corporation 2021
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{ $statefulSetName := include "ibm-mq.fullname" . }}
{{ $dataVolumeClaimName := include "ibm-mq.pvcDataName" . }}
{{ $qmVolumeClaimName := include "ibm-mq.pvcQMName" . }}
{{ $logVolumeClaimName  := include "ibm-mq.pvcLogName" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $statefulSetName }}
  labels:
    {{- include "ibm-mq.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
{{- include "ibm-mq.selectorLabels" . | nindent 6 }}
  serviceName: qm
  {{- if and (.Values.queueManager.nativeha.enable) (.Values.queueManager.multiinstance.enable) }}
    {{- fail "Error: Both nativeha and multiinstance flags should not be enabled simultaneously" }}
  {{- end }}
  {{- if .Values.queueManager.nativeha.enable }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: OnDelete
  replicas: 3
  {{- else if .Values.queueManager.multiinstance.enable }}
  updateStrategy:
    type: OnDelete
  replicas: 2
  {{- else }}
  replicas: 1
  updateStrategy:
    type: {{ .Values.queueManager.updateStrategy }}
  {{- end }}
  template:
    metadata:
      annotations:
      {{- with .Values.metadata.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
      {{- with .Values.metadata.labels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        {{- include "ibm-mq.labels" . | nindent 8 }}
        statefulSetName: {{ $statefulSetName }}
    spec:
      affinity:
      {{- if or .Values.queueManager.nativeha.enable .Values.queueManager.multiinstance.enable }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: statefulSetName
                    operator: In
                    values:
                      - {{ $statefulSetName }}
              topologyKey: kubernetes.io/hostname
      {{- end }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - "amd64"
                - "s390x"
                - "ppc64le"
              - key: kubernetes.io/os
                operator: In
                values:
                - "linux"
              {{- range $index, $source := .Values.affinity.nodeAffinity.matchExpressions }}
              - key: {{ $source.key }}
                operator: {{ $source.operator }}
                values:
                {{- range $source.values }}
                - {{ . }}
                {{- end }}
              {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{ toYaml .Values.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{- range $index, $source := .Values.tolerations }}
      - key: {{ $source.key }}
        operator: {{ $source.operator }}
        value: {{ $source.value }}
        effect: {{ $source.effect }}
        {{- if $source.tolerationSeconds }}
        tolerationSeconds: {{ $source.tolerationSeconds }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      serviceAccountName: {{ include "ibm-mq.fullname" ( . ) }}
      securityContext:
        fsGroup: {{ .Values.security.context.fsGroup }}
        {{- if .Values.security.context.seccompProfile.type }}
        seccompProfile: 
          type: {{ .Values.security.context.seccompProfile.type }}
        {{- end }}
        supplementalGroups:
        {{- range $group := .Values.security.context.supplementalGroups }}
          - {{ $group -}}
        {{ end }}
      {{- if .Values.queueManager.nativeha.tls }}
      {{- if .Values.queueManager.nativeha.tls.secretName }}
      volumes:
      {{- else if or (or (or (or (or (.Values.pki.trust) (.Values.pki.keys)) (.Values.queueManager.mqscConfigMaps)) (.Values.queueManager.qminiConfigMaps)) (.Values.queueManager.mqscSecrets)) (.Values.queueManager.qminiSecrets) }}
      volumes:
      {{- else if .Values.queueManager.multiinstance.enable }}
      volumes:
      {{- end }}
      {{- else if or (or (or (or (or (.Values.pki.trust) (.Values.pki.keys)) (.Values.queueManager.mqscConfigMaps)) (.Values.queueManager.qminiConfigMaps)) (.Values.queueManager.mqscSecrets)) (.Values.queueManager.qminiSecrets) }}
      volumes:
      {{- else if .Values.queueManager.multiinstance.enable }}
      volumes:
      {{- else if .Values.security.readOnlyRootFilesystem }}
      volumes:
      {{- else if .Values.credentials.enable }}
      volumes:
      {{- else if .Values.web.manualConfig.configMap.name }}
      volumes:
      {{- else if .Values.web.manualConfig.secret.name }}
      volumes:
      {{- end}}
      {{- if .Values.queueManager.multiinstance.enable }}
      - name: {{ $dataVolumeClaimName }}
        persistentVolumeClaim:
          claimName: {{ $dataVolumeClaimName }}-{{ $statefulSetName }}
      - name: {{ $logVolumeClaimName }}
        persistentVolumeClaim:
          claimName: {{ $logVolumeClaimName }}-{{ $statefulSetName }}
      {{- end}}
      {{- if .Values.queueManager.nativeha.tls }}
      {{- if .Values.queueManager.nativeha.tls.secretName }}
      - name: ha-tls
        secret:
          secretName: {{ .Values.queueManager.nativeha.tls.secretName }}
          defaultMode: 288
      {{- end }}
      {{- end }}
      {{- range $index, $source := .Values.pki.trust }}
      {{- if $source.secret }}
      - name: trust{{- $index }}
        secret:
          secretName: {{ $source.secret.secretName }}
          defaultMode: 0440
          items:
          {{- range $source.secret.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- if $source.configMap }}
      - name: trust{{- $index }}
        configMap:
          name: {{ $source.configMap.configMapName }}
          defaultMode: 420
          items:
          {{- range $source.configMap.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- range $index, $source := .Values.pki.keys }}
      {{- if $source.secret }}
      - name: {{ $source.name }}
        secret:
          secretName: {{ $source.secret.secretName }}
          defaultMode: 0440
          items:
          {{- range $source.secret.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- range $index, $source := .Values.queueManager.mqscConfigMaps }}
      {{- if $source.items }}
      - name: mqsc-cm-{{ $source.name }}
        configMap:
          name: {{ $source.name }}
          defaultMode: 420
          items:
          {{- range $source.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- range $index, $source := .Values.queueManager.qminiConfigMaps }}
      {{- if $source.items }}
      - name: ini-cm-{{ $source.name }}
        configMap:
          name: {{ $source.name }}
          defaultMode: 420
          items:
          {{- range $source.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- range $index, $source := .Values.queueManager.mqscSecrets }}
      {{- if $source.items }}
      - name: mqsc-secret-{{ $source.name }}
        secret:
          secretName: {{ $source.name }}
          defaultMode: 420
          items:
          {{- range $source.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- range $index, $source := .Values.queueManager.qminiSecrets }}
      {{- if $source.items }}
      - name: ini-secret-{{ $source.name }}
        secret:
          secretName: {{ $source.name }}
          defaultMode: 420
          items:
          {{- range $source.items }}
            - key: {{ . }}
              path: {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.web.manualConfig.configMap.name }}
      - name: cm-webxml-{{ .Values.web.manualConfig.configMap.name }}
        configMap:
          name: {{ .Values.web.manualConfig.configMap.name }}
          defaultMode: 0644
          items:
            - key: mqwebuser.xml
              path: mqwebuser.xml
      {{- else if .Values.web.manualConfig.secret.name }}
      - name: s-webxml-{{ .Values.web.manualConfig.secret.name }}
        secret:
          secretName: {{ .Values.web.manualConfig.secret.name }}
          defaultMode: 0644
          items:
            - key: mqwebuser.xml
              path: mqwebuser.xml
      {{- end }}
      {{- if .Values.security.readOnlyRootFilesystem }}
      - name: run-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      {{- end }}
      {{- if .Values.credentials.enable }}
      - name: mq-credentials
        secret:
          defaultMode: 420
          secretName: {{ .Values.credentials.secret }}
      {{- end }}
      terminationGracePeriodSeconds: {{.Values.queueManager.terminationGracePeriodSeconds}}
      containers:
        - name: qmgr
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          terminationMessagePath: "/run/termination-log"
          ports:
          - containerPort: 1414
          - containerPort: 9443
          - containerPort: 9157
          {{- if .Values.queueManager.nativeha.enable }}
          - containerPort: 9414
          {{- end }}
          env:
          - name: LICENSE
            value: {{ .Values.license }}
          - name: MQ_QMGR_NAME
            value: "{{ .Values.queueManager.name | default .Release.Name | replace "-" "" }}"
          - name: MQ_NATIVE_HA
            value: "{{ .Values.queueManager.nativeha.enable | default false }}"
          {{- if .Values.queueManager.multiinstance.enable }}
          - name: MQ_MULTI_INSTANCE
            value: "{{ .Values.queueManager.multiinstance.enable | default false }}"
          {{- end }}
          {{- /*
            The following IF statement for the MQ_ENABLE_EMBEDDED_WEB_SERVER may initially look confusing.
            Originally the helm chart did not set the environment variable. To protect backwards 
            compatibility  as much as possible we wanted to maintain this behaviour. 
            The first condition checks it is set to a non-false value, excludes both unset and false. 
            In our case we want to explicitly set if it is NOT unset, hence the reason for the complex IF
            statement.
          */}}
          {{- if or .Values.web.enable (eq .Values.web.enable false)}}
          - name: MQ_ENABLE_EMBEDDED_WEB_SERVER
            value: "{{ .Values.web.enable | default false }}"
          {{- end }}
          {{- if .Values.queueManager.nativeha.enable }}
          - name: MQ_NATIVE_HA_INSTANCE_0_NAME
            value: {{ include "ibm-mq.pod0.name" . }}
          - name: MQ_NATIVE_HA_INSTANCE_0_REPLICATION_ADDRESS
            value: {{ include "ibm-mq.pod0.service" . }}(9414)
          - name: MQ_NATIVE_HA_INSTANCE_1_NAME
            value: {{ include "ibm-mq.pod1.name" . }}
          - name: MQ_NATIVE_HA_INSTANCE_1_REPLICATION_ADDRESS
            value: {{ include "ibm-mq.pod1.service" . }}(9414)
          - name: MQ_NATIVE_HA_INSTANCE_2_NAME
            value: {{ include "ibm-mq.pod2.name" . }}
          - name: MQ_NATIVE_HA_INSTANCE_2_REPLICATION_ADDRESS
            value: {{ include "ibm-mq.pod2.service" . }}(9414)
          {{- end }}
          - name: MQ_LOGGING_CONSOLE_FORMAT
            value: {{ .Values.log.format | default "basic" }}
          - name: MQ_ENABLE_METRICS
            value: "{{ .Values.metrics.enabled | default false }}"
          - name: DEBUG
            value: "{{ .Values.log.debug | default false }}"
          - name: MQ_ENABLE_TRACE_STRMQM
            value: "{{ .Values.trace.strmqm | default false }}"
          - name: MQ_ENABLE_TRACE_CRTMQDIR
            value: "{{ .Values.trace.crtmqdir | default false }}"
          - name: MQ_ENABLE_TRACE_CRTMQM
            value: "{{ .Values.trace.crtmqm | default false }}"
          - name: MQ_EPHEMERAL_PREFIX
            value: "/run/mqm"
          - name: MQ_GRACE_PERIOD
            value: "{{sub .Values.queueManager.terminationGracePeriodSeconds 1}}"
          {{- range $index, $source := .Values.queueManager.envVariables }}
          - name: {{ $source.name }}
            value: "{{ $source.value }}"
          {{- end }}
          {{- if .Values.queueManager.nativeha.tls }}
          {{- if (.Values.queueManager.nativeha.tls.secretName) }}
          - name: MQ_NATIVE_HA_TLS
            value: "true"
          - name: MQ_NATIVE_HA_CIPHERSPEC
            value: "{{ .Values.queueManager.nativeha.tls.cipherSpec | default "ANY_TLS12_OR_HIGHER"}}"
          {{- end }}
          {{- end }}
          {{- if .Values.queueManager.nativeha.tls }}
          {{- if .Values.queueManager.nativeha.tls.secretName }}
          volumeMounts:
          {{- else if or (or (or (or (or (or (.Values.pki.trust) (.Values.pki.keys)) (.Values.queueManager.mqscConfigMaps)) (.Values.queueManager.qminiConfigMaps)) (.Values.queueManager.mqscSecrets)) (.Values.queueManager.qminiSecrets)) ((.Values.persistence.qmPVC.enable))}}
          volumeMounts:
          {{- else if .Values.queueManager.multiinstance.enable }}
          volumeMounts:
          {{- end }}
          {{- else if or (or (or (or (or (or (.Values.pki.trust) (.Values.pki.keys)) (.Values.queueManager.mqscConfigMaps)) (.Values.queueManager.qminiConfigMaps)) (.Values.queueManager.mqscSecrets)) (.Values.queueManager.qminiSecrets)) ((.Values.persistence.qmPVC.enable))}}
          volumeMounts:
          {{- else if .Values.queueManager.multiinstance.enable }}
          volumeMounts:
          {{- else if .Values.security.readOnlyRootFilesystem }}
          volumeMounts:
          {{- else if .Values.credentials.enable }}
          volumeMounts:
          {{- else if .Values.web.manualConfig.configMap.name }}
          volumeMounts:
          {{- else if .Values.web.manualConfig.secret.name }}
          volumeMounts:
          {{- end}}
          {{- if .Values.queueManager.nativeha.tls }}
          {{- if .Values.queueManager.nativeha.tls.secretName }}
          - name: ha-tls
            readOnly: true
            mountPath: /etc/mqm/ha/pki/keys/ha
          {{- end }}
          {{- end }}
          {{- if .Values.pki.trust }}
          {{- range $index, $source := .Values.pki.trust }}
          - name: trust{{- $index }}
            mountPath: "/etc/mqm/pki/trust/{{- $index }}"
            readOnly: true
          {{- end }}
          {{- end }}
          {{- if .Values.pki.keys }}
          {{- range $index, $source := .Values.pki.keys }}
          - name: {{ $source.name }}
            mountPath: "/etc/mqm/pki/keys/{{- $source.name }}"
            readOnly: true
          {{- end }}
          {{- end }}
          {{- if .Values.queueManager.mqscConfigMaps }}
          {{- range $index, $source := .Values.queueManager.mqscConfigMaps }}
          {{- range $index, $item := $source.items }}
          - name: mqsc-cm-{{ $source.name }}
            mountPath: "/etc/mqm/{{- $item }}"
            subPath: "{{- $item }}"
            readOnly: true
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.queueManager.qminiConfigMaps }}
          {{- range $index, $source := .Values.queueManager.qminiConfigMaps }}
          {{- range $index, $item := $source.items }}
          - name: ini-cm-{{ $source.name }}
            mountPath: "/etc/mqm/{{- $item }}"
            subPath: "{{- $item }}"
            readOnly: true
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.queueManager.mqscSecrets }}
          {{- range $index, $source := .Values.queueManager.mqscSecrets }}
          {{- range $index, $item := $source.items }}
          - name: mqsc-secret-{{ $source.name }}
            mountPath: "/etc/mqm/{{- $item }}"
            subPath: "{{- $item }}"
            readOnly: true
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.queueManager.qminiSecrets }}
          {{- range $index, $source := .Values.queueManager.qminiSecrets }}
          {{- range $index, $item := $source.items }}
          - name: ini-secret-{{ $source.name }}
            mountPath: "/etc/mqm/{{- $item }}"
            subPath: "{{- $item }}"
            readOnly: true
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if or .Values.persistence.qmPVC.enable .Values.queueManager.multiinstance.enable }}
          - mountPath: "/mnt/mqm"
            name: {{ $qmVolumeClaimName }}
          {{- end }}
          {{- if or .Values.persistence.dataPVC.enable .Values.queueManager.multiinstance.enable }}
          - mountPath: "/mnt/mqm-data"
            name: {{ $dataVolumeClaimName }}
          {{- end }}
          {{- if or .Values.persistence.logPVC.enable .Values.queueManager.multiinstance.enable }}
          - mountPath: "/mnt/mqm-log"
            name: {{ $logVolumeClaimName }}
          {{- end }}
          {{- if .Values.web.manualConfig.configMap.name }}
          - name: cm-webxml-{{ .Values.web.manualConfig.configMap.name }}
            mountPath: "/etc/mqm/web/installations/Installation1/servers/mqweb/mqwebuser.xml"
            subPath: "mqwebuser.xml"
            readOnly: true
          {{- else if .Values.web.manualConfig.secret.name }}
          - name: s-webxml-{{ .Values.web.manualConfig.secret.name }}
            mountPath: "/etc/mqm/web/installations/Installation1/servers/mqweb/mqwebuser.xml"
            subPath: "mqwebuser.xml"
            readOnly: true
          {{- end }}
          {{- if .Values.security.readOnlyRootFilesystem }}
          - mountPath: "/run"
            name: run-volume
          - mountPath: "/tmp"
            name: tmp-volume
          {{- end }}
          {{- if .Values.credentials.enable }}
          - name: mq-credentials
            mountPath: "/var/run/secrets"
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: {{ .Values.security.readOnlyRootFilesystem }}
            {{- if .Values.security.runAsUser }}
            runAsUser: {{ .Values.security.runAsUser }}
            {{- end }}
            runAsNonRoot: true
            privileged: false
            capabilities:
              drop:
                - ALL
          # Set liveness probe to determine if the queue manager is running
          livenessProbe:
            exec:
              command:
              - chkmqhealthy
            {{- if or .Values.queueManager.nativeha.enable .Values.queueManager.multiinstance.enable }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 0 }}
            {{- else }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 90 }}
            {{- end }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          # Set readiness probe to determine if the MQ listener is running
          readinessProbe:
            exec:
              command:
              - chkmqready
            {{- if or .Values.queueManager.nativeha.enable .Values.queueManager.multiinstance.enable }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 0 }}
            {{- else }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 10 }}
            {{- end }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- if or .Values.queueManager.multiinstance.enable .Values.queueManager.nativeha.enable }}
          startupProbe:
            exec:
              command:
              - chkmqstarted
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          resources:
            limits:
{{ toYaml .Values.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.resources.requests | indent 14 }}
      {{- if .Values.security.initVolumeAsRoot }}
      initContainers:
        - name: qmgr-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          terminationMessagePath: "/run/termination-log"
          command: ["runmqserver"]
          args: ["-i"]
          env:
          - name: LICENSE
            value: {{ .Values.license }}
          - name: MQ_QMGR_NAME
            value: "{{ .Values.queueManager.name | default .Release.Name | replace "-" "" }}"
          - name: MQ_NATIVE_HA
            value: "{{ .Values.queueManager.nativeha.enable | default false }}"
          - name: MQ_LOGGING_CONSOLE_FORMAT
            value: {{ .Values.log.format | default "basic" }}
          - name: DEBUG
            value: "{{ .Values.log.debug | default false }}"
          {{- if or .Values.persistence.dataPVC.enable .Values.persistence.qmPVC.enable .Values.persistence.logPVC.enable .Values.queueManager.multiinstance.enable }}
          volumeMounts:
          {{- end }}
          {{- if or .Values.persistence.qmPVC.enable .Values.queueManager.multiinstance.enable }}
          - mountPath: "/mnt/mqm"
            name: {{ $qmVolumeClaimName }}
          {{- end }}
          {{- if or .Values.persistence.dataPVC.enable .Values.queueManager.multiinstance.enable }}
          - mountPath: "/mnt/mqm-data"
            name: {{ $dataVolumeClaimName }}
          {{- end }}
          {{- if or .Values.persistence.logPVC.enable .Values.queueManager.multiinstance.enable }}
          - mountPath: "/mnt/mqm-log"
            name: {{ $logVolumeClaimName }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            privileged: false
            capabilities:
              add:
                - CHOWN
                - FOWNER
                - DAC_OVERRIDE
              drop:
                - ALL
      {{- end }}
  volumeClaimTemplates:
  {{- if and (.Values.persistence.dataPVC.enable) (eq .Values.queueManager.multiinstance.enable false) }}
  - metadata:
      name: {{ $dataVolumeClaimName }}
      labels:
{{- include "ibm-mq.labelsNoVersion" . | nindent 8 }}
    spec:
      # If present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by Kubernetes Administrator
      #
      # Setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.persistence.dataPVC.storageClassName | quote }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.dataPVC.size | quote }}
  {{- end }}
  {{- if and (.Values.persistence.logPVC.enable) (eq .Values.queueManager.multiinstance.enable false) }}
  - metadata:
      name: {{ $logVolumeClaimName }}
      labels:
{{- include "ibm-mq.labelsNoVersion" . | nindent 8 }}
    spec:
      # If present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by Kubernetes Administrator
      #
      # Setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.persistence.logPVC.storageClassName | quote }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.logPVC.size | quote }}
  {{- end }}
  {{- if or .Values.persistence.qmPVC.enable .Values.queueManager.multiinstance.enable }}
  - metadata:
      name: {{ $qmVolumeClaimName }}
      labels:
{{- include "ibm-mq.labelsNoVersion" . | nindent 8 }}
    spec:
      # If present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by Kubernetes Administrator
      #
      # Setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.persistence.qmPVC.storageClassName | quote }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.qmPVC.size | quote }}
  {{- end }}
